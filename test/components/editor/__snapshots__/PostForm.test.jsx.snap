// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders the post form correctly 1`] = `
<form
  className="form"
  onSubmit={[Function]}
>
  <input
    className="text-input"
    id="title"
    onChange={[Function]}
    placeholder="Title *"
    type="text"
    value=""
  />
  <input
    className="text-input"
    id="subtitle"
    onChange={[Function]}
    placeholder="Subtitle"
    type="text"
    value=""
  />
  <textarea
    className="textarea"
    id="content"
    onChange={[Function]}
    placeholder="Content"
    type="text"
    value=""
  />
  <ReactMarkdown
    astPlugins={Array []}
    className="post"
    escapeHtml={true}
    plugins={Array []}
    rawSourcePos={false}
    renderers={Object {}}
    skipHtml={false}
    source=""
    sourcePos={false}
    transformLinkUri={[Function]}
  />
  <input
    className="text-input"
    id="author"
    onChange={[Function]}
    placeholder="Author"
    type="text"
    value=""
  />
  <withStyles(SingleDatePicker)
    anchorDirection="left"
    block={false}
    calendarInfoPosition="bottom"
    customCloseIcon={null}
    customInputIcon={null}
    date={"1970-01-01T00:00:00.000Z"}
    daySize={39}
    disabled={false}
    displayFormat="DD.MM.YYYY"
    enableOutsideDays={false}
    firstDayOfWeek={null}
    focused={false}
    hideKeyboardShortcutsPanel={false}
    horizontalMargin={0}
    id="date"
    initialVisibleMonth={null}
    inputIconPosition="before"
    isDayBlocked={[Function]}
    isDayHighlighted={[Function]}
    isOutsideRange={[Function]}
    isRTL={false}
    keepFocusOnInput={false}
    keepOpenOnDateSelect={false}
    monthFormat="MMMM YYYY"
    navNext={null}
    navPrev={null}
    noBorder={false}
    numberOfMonths={1}
    onClose={[Function]}
    onDateChange={[Function]}
    onFocusChange={[Function]}
    onNextMonthClick={[Function]}
    onPrevMonthClick={[Function]}
    openDirection="down"
    orientation="horizontal"
    phrases={
      Object {
        "calendarLabel": "Calendar",
        "chooseAvailableDate": [Function],
        "clearDate": "Clear Date",
        "closeDatePicker": "Close",
        "dateIsSelected": [Function],
        "dateIsUnavailable": [Function],
        "enterKey": "Enter key",
        "escape": "Escape key",
        "hideKeyboardShortcutsPanel": "Close the shortcuts panel.",
        "homeEnd": "Home and end keys",
        "jumpToNextMonth": "Move forward to switch to the next month.",
        "jumpToPrevMonth": "Move backward to switch to the previous month.",
        "keyboardNavigationInstructions": "Press the down arrow key to interact with the calendar and
  select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",
        "keyboardShortcuts": "Keyboard Shortcuts",
        "leftArrowRightArrow": "Right and left arrow keys",
        "moveFocusByOneDay": "Move backward (left) and forward (right) by one day.",
        "moveFocusByOneMonth": "Switch months.",
        "moveFocusByOneWeek": "Move backward (up) and forward (down) by one week.",
        "moveFocustoStartAndEndOfWeek": "Go to the first or last day of a week.",
        "openThisPanel": "Open this panel.",
        "pageUpPageDown": "page up and page down keys",
        "questionMark": "Question mark",
        "returnFocusToInput": "Return to the date input field.",
        "selectFocusedDate": "Select the date in focus.",
        "showKeyboardShortcutsPanel": "Open the keyboard shortcuts panel.",
        "upArrowDownArrow": "up and down arrow keys",
      }
    }
    placeholder="Date"
    readOnly={false}
    regular={false}
    renderCalendarInfo={null}
    renderDayContents={null}
    renderMonth={null}
    reopenPickerOnClearDate={false}
    required={false}
    screenReaderInputMessage=""
    showClearDate={false}
    showDefaultInputIcon={false}
    small={false}
    verticalHeight={null}
    verticalSpacing={22}
    weekDayFormat="dd"
    withFullScreenPortal={false}
    withPortal={false}
  />
  <div>
    <div
      className="pretty p-svg p-curve p-smooth"
    >
      <input
        checked={false}
        id="published"
        onChange={[Function]}
        type="checkbox"
      />
      <div
        className="state p-success"
      >
        <svg
          className="svg svg-icon"
          viewBox="0 0 20 20"
        >
          <path
            d="M7.629,14.566c0.125,0.125,0.291,0.188,0.456,0.188c0.164,0,
 0.329-0.062,0.456-0.188l8.219-8.221c0.252-0.252,
 0.252-0.659,0-0.911c-0.252-0.252-0.659-0.252-0.911,
 0l-7.764,7.763L4.152,9.267c-0.252-0.251-0.66-0.251-0.911,
 0c-0.252,0.252-0.252,0.66,0,0.911L7.629,14.566z"
            style={
              Object {
                "fill": "white",
                "stroke": "white",
              }
            }
          />
        </svg>
        <label>
          Published
        </label>
      </div>
    </div>
  </div>
  <div>
    <button
      className="button button--ingroup"
      type="button"
    >
      Back
    </button>
    <button
      className="button button--ingroup"
    >
      Save Post
    </button>
  </div>
</form>
`;
